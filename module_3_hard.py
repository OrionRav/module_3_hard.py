# 2023/10/12 00:00|Дополнительное практическое задание по модулю "Подробнее о функциях."

# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности

# Задание "Раз, два, три, четыре, пять .... Это не всё?":
# Наши студенты, без исключения,- очень умные ребята. Настолько умные, что иногда по утру сами путаются в том,
# что намудрили вчера вечером.
# Один из таких учеников уснул на клавиатуре в процессе упорной учёбы (ещё и трудолюбивые). Тем не менее
# даже после сна, его код остался рабочим и выглядел следующим образом:

# data_structure = [
#   [1, 2, 3],
#   {'a': 4, 'b': 5},
#   (6, {'cube': 7, 'drum': 8}),
#   "Hello",
#   ((), [{(2, 'Urban', ('Urban2', 35))}])
# ]

# Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
# Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.

# Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения
# для таких структур он не нашёл.

# Помогите сокурснику осуществить его задумку.

# Что должно быть подсчитано:
# 1. Все числа (не важно, являются они ключами или значениям или ещё чем-то).
# 2. Все строки (не важно, являются они ключами или значениям или ещё чем-то)

# Для примера, указанного выше, расчёт вёлся следующим образом:
# 1 + 2 + 3 + len('a') + 4 + len('b') + 5 + 6 + len('cube') + 7 + .... + 35 = 99

# Примечания (рекомендации):
# * Весь подсчёт должен выполняться одним вызовом функции.
# * Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
# * Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
# * Для определения типа данного используйте функцию isinstance.

# данные из условия задачи
data_structure = [
  [1, 2, 3],
  {'a': 4, 'b': 5},
  (6, {'cube': 7, 'drum': 8}),
  "Hello",
  ((), [{(2, 'Urban', ('Urban2', 35))}])
]
# Создаём функцию подсчёта данных строк и чисел
def calculate_structure_sum(data_structure):
    sum_all = 0
    # if isinstance(data_structure, (list, tuple, set, dict, int, float, str)):  - не идет всем списком
    # выполняется действие цикл к sum_all - к списку, к кортежу и к множеству
    if isinstance(data_structure, (list, tuple, set)):
        for item in data_structure:
            sum_all += calculate_structure_sum(item)
    # выполняется действие цикл к sum_all - к справочнику, где прописываем (ключ: значение) для key и value
    if isinstance(data_structure, dict):
        for key, value in data_structure.items():
            sum_all += calculate_structure_sum(key)
            sum_all += calculate_structure_sum(value)
    # выполняется действие к sum_all - целое число и число с плавающей запятой
    if isinstance(data_structure, (int, float)):
        sum_all += data_structure
    # выполняется действие k sum_all - фу-ции (len) по длине
    if isinstance(data_structure, str):
        sum_all += len(data_structure)
    # возврат из функции значением sum_all
    return sum_all

# вывод результата
result  = calculate_structure_sum(data_structure)
print(result)